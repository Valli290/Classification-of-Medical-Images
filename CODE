# Step 1: Install & Import Libraries
import tensorflow as tf
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Conv2D, MaxPooling2D, Flatten, Dense, Dropout
from tensorflow.keras.preprocessing.image import ImageDataGenerator
import matplotlib.pyplot as plt
import numpy as np

# Step 2: Simulation on  a Sample Dataset (for demo; use your medical data here)
# Using CIFAR-10 dataset and only using two classes for binary classification (e.g., 'airplane' = normal, 'automobile' = diseased)
(x_train, y_train), (x_test, y_test) = tf.keras.datasets.cifar10.load_data()

# Filtering two classes: Class 0 and 1
x_train = x_train[(y_train.flatten() == 0) | (y_train.flatten() == 1)]
y_train = y_train[(y_train.flatten() == 0) | (y_train.flatten() == 1)]

x_test = x_test[(y_test.flatten() == 0) | (y_test.flatten() == 1)]
y_test = y_test[(y_test.flatten() == 0) | (y_test.flatten() == 1)]

# Normalize
x_train, x_test = x_train / 255.0, x_test / 255.0

# Step 3: Building the CNN Model
model = Sequential([
    Conv2D(32, (3, 3), activation='relu', input_shape=(32, 32, 3)),
    MaxPooling2D(2, 2),
    Conv2D(64, (3, 3), activation='relu'),
    MaxPooling2D(2, 2),
    Flatten(),
    Dense(128, activation='relu'),
    Dropout(0.5),
    Dense(1, activation='sigmoid')  # Binary classification
])

model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])

# Step 4: Training the Model
model.fit(x_train, y_train, epochs=5, validation_data=(x_test, y_test))

# Step 5: Prediction on Sample Test Image
predictions = model.predict(x_test[:5])
for i, pred in enumerate(predictions):
    label = "Diseased" if pred > 0.5 else "Normal"
    plt.imshow(x_test[i])
    plt.title(f"Prediction: {label}")
    plt.axis("off")
    plt.show()
